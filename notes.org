* Learn Python the Hard Way Notes
** Observations
 * optional parens invoking functions (at least in some contexts)
 * variadic print function
 * Standard arithmetic operator precedence
 * snake_case var names
 * dynamic var types
 * ints cast to floats in mixed arithmetic
   #+BEGIN_SRC python
   type(1 * 1.0)
   <type 'float'>
   #+END_SRC
 * NameError format: =NameError: name 'average_passengers_per_car' is not defined=
 * %r formatter is a bit like ruby inspect -- gives programmer style format
 * can do destructuring assignment (=a,b = [1,2]=), but seems to only work with equal number of values
 * Current epoch seconds:
   #+BEGIN_SRC python
   from time import time
   int(time())
   #+END_SRC
 * *EXPLICIT RETURNS*
 * Importing:
    * each file is treated as a module
    * import the module by the filename (eg file =time.py= then =import time=)
    * module import names module as itself; lets us refer to nested identifiers with dot notation
    * also can import explicit names (functions) from a module =import pizza from italian_food= would find
      =def pizza...= in file =italian_food.py=
    * relevant: http://stackoverflow.com/questions/106896/how-many-python-classes-should-i-put-in-one-file
    * http://effbot.org/zone/import-confusion.htm
    * Circular imports seem to be allowed but still maybe not ideal?
  * =map=, =reduce=, etc are built-in functions rather than methods on lists
  * for or if blocks can have the body inlined on same line
  * classes are created with class keyword
  * class can accept an arg when defined -- seems to be superclass
  * method receiver is always passed as implicit first argument; have to accept this as an arg in methods for it to work
  * dicts are heterogeneous
  * Index a key with []; indexing missing key gives KeyError
  * also fetcha  key with =get=; =get= on missing key returns None
  * =get= takes default as in ruby
  * =dict.items()= to enumerate keys and values as tuples
  * make a dict from list of tuples with:

    #+BEGIN_SRC python
    dict([["k1", "v1"], ["k2", "v2"]])
    #+END_SRC


** Questions
 * Encoding String: =# -*- coding: utf-8 -*-= -- when is this necessary?
 * Double-quoted vs single quoted strings -- matter?
 * Thread-Macro / Function Piping -- is this legit? https://mdk.fr/blog/pipe-infix-syntax-for-python.html
